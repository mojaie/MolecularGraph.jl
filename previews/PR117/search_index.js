var documenterSearchIndex = {"docs":
[{"location":"moleculargraph/query/#Molecular-queries","page":"Molecular queries","title":"Molecular queries","text":"","category":"section"},{"location":"moleculargraph/query/","page":"Molecular queries","title":"Molecular queries","text":"Modules = [MolecularGraph]\nPages   = [\"./model/query.jl\", \"querycontainment.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/query/#MolecularGraph.remove_hydrogens!-Union{Tuple{SimpleMolGraph{T, V, E}}, Tuple{E}, Tuple{V}, Tuple{T}} where {T, V<:QueryTree, E<:QueryTree}","page":"Molecular queries","title":"MolecularGraph.remove_hydrogens!","text":"remove_hydrogens!(q::MolGraph) -> Nothing\n\nRemove hydrogens from the molecular query. \n\nShould be applied after specialize_nonaromatic!. This function is intended for generalization of PAINS query in PubChem dataset.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/query/#MolecularGraph.QueryAny","page":"Molecular queries","title":"MolecularGraph.QueryAny","text":"QueryAny\n\nQuery component type that generate tautology function (arg -> true/false).\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/query/#MolecularGraph.QueryLiteral","page":"Molecular queries","title":"MolecularGraph.QueryLiteral","text":"QueryLiteral\n\nGeneral query component type (arg -> key[arg] == value).\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/query/#MolecularGraph.QueryOperator","page":"Molecular queries","title":"MolecularGraph.QueryOperator","text":"QueryOperator\n\nQuery component type for logical operators (arg -> q1[arg] && q2[arg]).\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/query/#MolecularGraph.QueryTree","page":"Molecular queries","title":"MolecularGraph.QueryTree","text":"QueryTree\n\nQuery component containar type for molecular graph properties.\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/query/#MolecularGraph.QueryTruthTable","page":"Molecular queries","title":"MolecularGraph.QueryTruthTable","text":"QueryTruthTable(fml::Function, props::Vector{QueryLiteral}) -> QueryTruthTable\n\nTruth table evaluator for query match and containment. \n\nThis is expected to be generated by using generate_truthtable. Note that the properties must be unique and sorted if QueryTruthTable constructors is manually called for testing.\n\nfunction: function that takes a vector whose size is length(props) that corresponds to each property variables and returns true or false.\nprops: QueryLiteral vector.\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/query/#MolecularGraph.find_queries-Tuple{MolGraph, Any}","page":"Molecular queries","title":"MolecularGraph.find_queries","text":"find_queries(mol::MolGraph, query_diagram; subsets=[], filtering=true\n    ) -> DictDiGraph, vprops, eprops\n\nFind query relationship diagram by the given molecule. The filtered diagram represents query relationship that the molecule have.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/query/#MolecularGraph.query_containment_diagram-Tuple{}","page":"Molecular queries","title":"MolecularGraph.query_containment_diagram","text":"query_containment_diagram(;sourcefile=DEFAULT_QUERY_DEFAULT_QUERIES\n    ) -> DictDiGraph, vprops, eprops\n\nGenerate query containment diagram.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/inchi/#InChI","page":"InChI","title":"InChI","text":"","category":"section"},{"location":"moleculargraph/inchi/","page":"InChI","title":"InChI","text":"Modules = [MolecularGraph]\nPages   = [\"inchi.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/inchi/#MolecularGraph.inchi-Tuple{String}","page":"InChI","title":"MolecularGraph.inchi","text":"inchi(molblock::String; options::String = \"\", verbose::Bool = false) -> Union{String,Nothing}\ninchi(mol::MolGraph; options::String = \"\", verbose::Bool = false) -> Union{String,Nothing}\n\nGenerate InChI string from molblock string or molecule.\n\nOptions, e.g. \"SNon\" for 'no stereo information' are specified in https://github.com/mojaie/libinchi/blob/master/INCHIBASE/src/inchiapi.h\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/inchi/#MolecularGraph.inchikey-Tuple{Union{Nothing, String}}","page":"InChI","title":"MolecularGraph.inchikey","text":"inchikey(inchi::String) -> Union{String,Nothing}\ninchikey(mol::MolGraph) -> Union{String,Nothing}\n\nGenerate InChI key from InChI string or molecule\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/inchi/#MolecularGraph.inchitomol-Tuple{String}","page":"InChI","title":"MolecularGraph.inchitomol","text":"function inchitomol(inchi::String; options = \"\", verbose = false)\n\nGenerate molecule from inchi string, options are specified in https://github.com/mojaie/libinchi/blob/master/INCHIBASE/src/inchiapi.h\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/inchi/#MolecularGraph.inchitosdf-Tuple{String}","page":"InChI","title":"MolecularGraph.inchitosdf","text":"inchitosdf(inchi::String; options::String = \"\") -> Union{String,Nothing}\n\nGenerate sdf string from inchi string, options are specified in https://github.com/mojaie/libinchi/blob/master/INCHIBASE/src/inchiapi.h\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#Graph-algorithms","page":"Graph algorithims","title":"Graph algorithms","text":"","category":"section"},{"location":"moleculargraph/graph/#Bipartite-Graph","page":"Graph algorithims","title":"Bipartite Graph","text":"","category":"section"},{"location":"moleculargraph/graph/","page":"Graph algorithims","title":"Graph algorithims","text":"Modules = [MolecularGraph]\nPages   = [\"graph/bipartite.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/graph/#Maximum-clique","page":"Graph algorithims","title":"Maximum clique","text":"","category":"section"},{"location":"moleculargraph/graph/","page":"Graph algorithims","title":"Graph algorithims","text":"Modules = [MolecularGraph]\nPages   = [\"graph/clique.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/graph/#MolecularGraph.all_maximal_cliques-Union{Tuple{U}, Tuple{T}, Tuple{Type{U}, Graphs.SimpleGraphs.SimpleGraph{T}}} where {T, U}","page":"Graph algorithims","title":"MolecularGraph.all_maximal_cliques","text":"all_maximal_cliques(::Type{U}, g::SimpleGraph{T}; kwargs...\n    ) where {T,U} -> (Vector{U}, Symbol)\n\nCalculate maximal cliques.\n\nReference\n\nTomita, E., Tanaka, A., & Takahashi, H. (2006). The worst-case time complexity for generating all maximal cliques and computational experiments. Theoretical Computer Science, 363(1), 28–42. https://doi.org/10.1016/J.TCS.2006.06.015\nCazals, F., & Karande, C. (2008). A note on the problem of reporting maximal cliques. Theoretical Computer Science, 407(1–3), 564–568. https://doi.org/10.1016/j.tcs.2008.05.010\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#MolecularGraph.all_maximal_conn_cliques-Union{Tuple{U}, Tuple{T}, Tuple{Type{U}, Graphs.SimpleGraphs.SimpleGraph{T}}} where {T, U}","page":"Graph algorithims","title":"MolecularGraph.all_maximal_conn_cliques","text":"all_maximal_conn_cliques(::Type{U}, g::SimpleGraph{T}, eattrs::Dict;\n    kwargs...) where {T,U} -> (Vector{U}, Symbol)\n\nCalculate maximal connected cliques.\n\nReference\n\nCazals, F., & Karande, C. (2005). An algorithm for reporting maximal c-cliques. Theoretical Computer Science, 349(3), 484–490. https://doi.org/10.1016/j.tcs.2005.09.038\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#MolecularGraph.approx_maximum_clique-Union{Tuple{Graphs.SimpleGraphs.SimpleGraph{T}}, Tuple{T}, Tuple{Graphs.SimpleGraphs.SimpleGraph{T}, Any}} where T","page":"Graph algorithims","title":"MolecularGraph.approx_maximum_clique","text":"approx_maximum_clique(g) -> Vector{Int}\n\nReturn approximate maximal cliques.\n\nReference:\n\nBoppana, R., & Halldórsson, M. M. (1992).\nhttps://networkx.org/documentation/stable/modules/networkx/algorithms/approximation/clique.html#maxclique\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#MolecularGraph.maximum_clique-Union{Tuple{U}, Tuple{T}, Tuple{Type{U}, Graphs.SimpleGraphs.SimpleGraph{T}}} where {T, U}","page":"Graph algorithims","title":"MolecularGraph.maximum_clique","text":"maximum_clique(::Type{U}, g::SimpleGraph{T}; kwargs...) where {T,U} -> (U, Symbol)\n\nCalculate maximum clique.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#MolecularGraph.maximum_conn_clique-Union{Tuple{U}, Tuple{T}, Tuple{Type{U}, Graphs.SimpleGraphs.SimpleGraph{T}}} where {T, U}","page":"Graph algorithims","title":"MolecularGraph.maximum_conn_clique","text":"maximum_conn_clique(::Type{U}, g::SimpleGraph{T}, eattrs::Dict;\n    kwargs...) where {T,U} -> (U, Symbol)\n\nCalculate maximal connected cliques.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#Cycle-basis","page":"Graph algorithims","title":"Cycle basis","text":"","category":"section"},{"location":"moleculargraph/graph/","page":"Graph algorithims","title":"Graph algorithims","text":"Modules = [MolecularGraph]\nPages   = [\"graph/cycle.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/graph/#MolecularGraph.mincyclebasis-Union{Tuple{Graphs.SimpleGraphs.SimpleGraph{T}}, Tuple{T}} where T","page":"Graph algorithims","title":"MolecularGraph.mincyclebasis","text":"mincyclebasis(graph::UndirectedGraph) -> Vector{Vector{Int}}\n\nReturns minimum cycle basis represented as an array of edge sequence that make up a cycle.\n\nReference\n\nde Pina, J.C. Applications of shortest path methods. PhD thesis, University of Amsterdam, Nether-lands (1995)\nKavitha, T., Mehlhorn, K., Michail, D. & Paluch, K. E. An tildeO(m^2n) Algorithm for Minimum Cycle Basis of Graphs. Algorithmica 52, 333–349 (2008).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#Maximum-common-subgraph-(Clique-detection-based-algorithm)","page":"Graph algorithims","title":"Maximum common subgraph (Clique detection based algorithm)","text":"","category":"section"},{"location":"moleculargraph/graph/","page":"Graph algorithims","title":"Graph algorithims","text":"Modules = [MolecularGraph]\nPages   = [\"graph/isomorphism_clique.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/graph/#MolecularGraph.maximum_common_subgraph-Tuple{ConstraintArrayMCIS, ConstraintArrayMCIS}","page":"Graph algorithims","title":"MolecularGraph.maximum_common_subgraph","text":"maximum_common_subgraph(g::ConstraintArrayMCIS, h::ConstraintArrayMCIS;\n    connected=false, kwargs...) -> (Dict, Symbol)\n\nCompute maximum common node-induced subgraph (MCIS) between the two MCS constraints.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#MolecularGraph.maximum_common_subgraph-Union{Tuple{E}, Tuple{V}, Tuple{D}, Tuple{T}, Tuple{ConstraintArrayMCES{T, D, V, E}, ConstraintArrayMCES{T, D, V, E}}} where {T, D, V, E}","page":"Graph algorithims","title":"MolecularGraph.maximum_common_subgraph","text":"maximum_common_subgraph(g::ConstraintArrayMCES, h::ConstraintArrayMCES;\n    connected=false, kwargs...) -> (Dict, Symbol)\n\nCompute maximum common edge-induced subgraph (MCES) between the two MCS constraints.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#MolecularGraph.modular_product-Tuple{MolecularGraph.ConstraintArrayMCS, MolecularGraph.ConstraintArrayMCS}","page":"Graph algorithims","title":"MolecularGraph.modular_product","text":"modular_product(g::ConstraintArrayMCS, h::ConstraintArrayMCS;\n    tolerance=0, kwargs...) -> SimpleGraph\n\nCompute modular product of the two MCS constrait arrays.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#Subgraph-isomorphism-match-(VF2-algorithm)","page":"Graph algorithims","title":"Subgraph isomorphism match (VF2 algorithm)","text":"","category":"section"},{"location":"moleculargraph/graph/","page":"Graph algorithims","title":"Graph algorithims","text":"Modules = [MolecularGraph]\nPages   = [\"graph/isomorphism_vf2.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/graph/#MolecularGraph.edgesubgraph_is_isomorphic-Tuple{Any, Any}","page":"Graph algorithims","title":"MolecularGraph.edgesubgraph_is_isomorphic","text":"edgesubgraph_is_isomorphic(g::SimpleGraph, h::SimpleGraph; kwargs...) -> Bool\n\nReturn whether an edge-induced subgraph of G is isomorphic to H.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#MolecularGraph.edgesubgraph_isomorphisms-Tuple{Any, Any}","page":"Graph algorithims","title":"MolecularGraph.edgesubgraph_isomorphisms","text":"edgesubgraph_isomorphisms(\n    g::SimpleGraph, h::SimpleGraph;\n    vmatch=(g,h)->true, ematch=(g,h)->true,\n    kwargs...) -> Iterator\n\nReturn an iterator that generate isomorphic mappings between H and edge-induced subgraphs of G. The returned iterator has ig => ih pairs that correspond to the indices of matching edges in G and H, respectively.\n\nvmatch and ematch control the features needed to be counted as a match.\n\nSee Graphs.induced_subgraph to construct the subgraphs that result from the match.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#MolecularGraph.is_isomorphic-Tuple{Any, Any}","page":"Graph algorithims","title":"MolecularGraph.is_isomorphic","text":"is_isomorphic(g::SimpleGraph, h::SimpleGraph; kwargs...) -> Bool\n\nReturn whether G and H are isomorphic.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#MolecularGraph.isomorphisms-Tuple{Any, Any}","page":"Graph algorithims","title":"MolecularGraph.isomorphisms","text":"isomorphisms(g::SimpleGraph, h::SimpleGraph; kwargs...) -> Iterator\n\nReturn an iterator that generate isomorphic mappings between G and H. The returned iterator has ig => ih pairs that correspond to the indices of matching nodes in G and H, respectively.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#MolecularGraph.nodesubgraph_is_isomorphic-Tuple{Any, Any}","page":"Graph algorithims","title":"MolecularGraph.nodesubgraph_is_isomorphic","text":"nodesubgraph_is_isomorphic(g::SimpleGraph, h::SimpleGraph; kwargs...) -> Bool\n\nReturn whether a node-induced subgraph of G is isomorphic to H.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#MolecularGraph.nodesubgraph_isomorphisms-Tuple{Any, Any}","page":"Graph algorithims","title":"MolecularGraph.nodesubgraph_isomorphisms","text":"nodesubgraph_isomorphisms(g::SimpleGraph, h::SimpleGraph; kwargs...) -> Iterator\n\nReturn an iterator that generate isomorphic mappings between H and node-induced subgraphs of G. The returned iterator has ig => ih pairs that correspond to the indices of matching nodes in G and H, respectively.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#MolecularGraph.subgraph_is_monomorphic-Tuple{Any, Any}","page":"Graph algorithims","title":"MolecularGraph.subgraph_is_monomorphic","text":"subgraph_is_monomorphic(g::SimpleGraph, h::SimpleGraph; kwargs...) -> Bool\n\nReturn whether a subgraph of G is monomorphic to H.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#MolecularGraph.subgraph_monomorphisms-Tuple{Any, Any}","page":"Graph algorithims","title":"MolecularGraph.subgraph_monomorphisms","text":"subgraph_monomorphisms(g::SimpleGraph, h::SimpleGraph; kwargs...) -> Iterator\n\nGenerate monomorphism mappings between H and subgraphs of G. The returned iterator has ig => ih pairs that correspond to the indices of matching nodes in G and H, respectively.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#MolecularGraph.VF2Matcher","page":"Graph algorithims","title":"MolecularGraph.VF2Matcher","text":"VF2Matcher{T,U,G<:SimpleGraph{T},H<:SimpleGraph{U}}\n\nLazy iterator that generate all isomorphism mappings between G and H.\n\nmatchtype should be one of the followings\n\n:isomorphic: G is isomorphic to H\n:subgraph_isomorphic: a node-induced subgraph of G is isomorphic to H\n:monomorphic: a subgraph of G is monomorphic to H\n\nOptions\n\nvmatch::Function: a function for semantic node attribute matching (default: (a, b) -> true)\nematch::Function: a function for semantic edge attribute matching (default: (a, b) -> true)\nmandatory::Dict{Int,Int}: mandatory node mapping (if matchtype=:edgeinduced, edge mapping)\nforbidden::Dict{Int,Int}: forbidden node mapping (if matchtype=:edgeinduced, edge mapping)\ntimeout::Union{Int,Nothing}: if specified, abort vf2 calculation when the time reached and return empty iterator (default: 10 seconds)\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/graph/#Maximum-cardinality-matching","page":"Graph algorithims","title":"Maximum cardinality matching","text":"","category":"section"},{"location":"moleculargraph/graph/","page":"Graph algorithims","title":"Graph algorithims","text":"Modules = [MolecularGraph]\nPages   = [\"graph/matching.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/graph/#MolecularGraph.is_perfect_matching-Tuple{Graphs.SimpleGraphs.SimpleGraph}","page":"Graph algorithims","title":"MolecularGraph.is_perfect_matching","text":"is_perfect_matching(G::SimpleGraph) -> Bool\nis_perfect_matching(G::SimpleGraph, matching::Set{Int}) -> Bool\n\nReturn if the given graph has a perfect matching.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#MolecularGraph.max_matching-Union{Tuple{Graphs.SimpleGraphs.SimpleGraph{T}}, Tuple{T}} where T","page":"Graph algorithims","title":"MolecularGraph.max_matching","text":"max_matching(G::SimpleGraph; method=:Blossom) -> Set{Int}\n\nCompute maximum cardinality matching by Edmonds' blossom algorithm and return the set of matched edges.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#Graph-operations","page":"Graph algorithims","title":"Graph operations","text":"","category":"section"},{"location":"moleculargraph/graph/","page":"Graph algorithims","title":"Graph algorithims","text":"Modules = [MolecularGraph]\nPages   = [\"graph/operators.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/graph/#MolecularGraph.induced_subgraph_edges-Tuple{Any, Any}","page":"Graph algorithims","title":"MolecularGraph.induced_subgraph_edges","text":"induced_subgraph_edges(g, node_list)\n\nReturn the node-induced subgraph edges.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#MolecularGraph.line_graph-Union{Tuple{Graphs.SimpleGraphs.SimpleGraph{T}}, Tuple{T}} where T","page":"Graph algorithims","title":"MolecularGraph.line_graph","text":"line_graph(G::SimpleGraph) -> SimpleGraph, Dict, Dict\n\nGenerate line graph, reverse mapping lg(v) -> g(e) and shared nodes mapping lg(e) -> g(v)\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#MolecularGraph.modular_product-Union{Tuple{T}, Tuple{Graphs.SimpleGraphs.SimpleGraph{T}, Graphs.SimpleGraphs.SimpleGraph{T}}} where T","page":"Graph algorithims","title":"MolecularGraph.modular_product","text":"modularproduct(g::SimpleGraph{T}, h::SimpleGraph{T};\n    vmatch=(g1,h1)->true,\n    edgefilter=(g1,g2,h1,h2)->has_edge(g,g1,g2)==has_edge(g,h1,h2)) where T\n\nReturn the modular product m of graphs g and h, and a mapping whether the edge is connected or not. mapping g,h nodes to m nods is f(i, j) = (i - 1) * nv(h) + j and the reverse mapping is f(i) = (div(i - 1, nv(h)) + 1, mod(i - 1, nv(h))) + 1, where i in g and j in h.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#Planarity","page":"Graph algorithims","title":"Planarity","text":"","category":"section"},{"location":"moleculargraph/graph/","page":"Graph algorithims","title":"Graph algorithims","text":"Modules = [MolecularGraph]\nPages   = [\"graph/planarity.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/graph/#MolecularGraph.isouterplanar-Tuple{Graphs.SimpleGraphs.SimpleGraph}","page":"Graph algorithims","title":"MolecularGraph.isouterplanar","text":"isouterplanar(graph::SimpleGraph) -> Bool\n\nReturn whether the graph is outerplanar. The outerplanarity test is based on a planarity test (see isplanar).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#MolecularGraph.isplanar-Tuple{Graphs.SimpleGraphs.SimpleGraph}","page":"Graph algorithims","title":"MolecularGraph.isplanar","text":"isplanar(graph::SimpleGraph) -> Bool\n\nReturn whether the graph is planar.\n\nReference\n\nde Fraysseix, H., & Ossona de Mendez, P. (2012). Trémaux trees and planarity. European Journal of Combinatorics, 33(3), 279–293. https://doi.org/10.1016/j.ejc.2011.09.012\nTrémaux trees and planarity. https://arxiv.org/abs/math/0610935\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/graph/#Traversals","page":"Graph algorithims","title":"Traversals","text":"","category":"section"},{"location":"moleculargraph/graph/","page":"Graph algorithims","title":"Graph algorithims","text":"Modules = [MolecularGraph]\nPages   = [\"graph/traversals.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/io/#Molecule-I/O","page":"I/O","title":"Molecule I/O","text":"","category":"section"},{"location":"moleculargraph/io/#SDFile-reader","page":"I/O","title":"SDFile reader","text":"","category":"section"},{"location":"moleculargraph/io/","page":"I/O","title":"I/O","text":"Modules = [MolecularGraph]\nPages   = [\"sdfilereader.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/io/#MolecularGraph.rxntoreaction-Union{Tuple{T}, Tuple{Type{T}, IO}} where T<:AbstractReaction","page":"I/O","title":"MolecularGraph.rxntoreaction","text":"rxntoreaction(::Type{T}, io::IO) -> T\nrxntoreaction(io::IO) -> Reaction{SDFMolGraph}\nrxntoreaction(::Type{T}, path::AbstractString) -> T\nrxntoreaction(path::AbstractString) -> Reaction{SDFMolGraph}\n\nRead a RXN file and parse it into a reaction object with the given type. The given argument should be a file input stream or a file path.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/io/#MolecularGraph.sdfilereader-Union{Tuple{T}, Tuple{Type{T}, IO}} where T<:AbstractMolGraph","page":"I/O","title":"MolecularGraph.sdfilereader","text":"sdfilereader(file::IO)\nsdfilereader(path::AbstractString)\n\nRead SDFile data from input stream (or a file path as a string) and return a lazy iterator that yields molecule objects.\n\nsdfilereader does not stop and raise errors when an erroneous or incompatible SDFile block is read but produces an error message and yields an empty molecule. If this behavior is not desirable, you can use the customized supplier function instead of default supplier nohaltsupplier\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/io/#MolecularGraph.sdftomol-Union{Tuple{T}, Tuple{Type{T}, IO}} where T<:AbstractMolGraph","page":"I/O","title":"MolecularGraph.sdftomol","text":"sdftomol(::Type{T}, io::IO) -> T\nsdftomol(io::IO) -> SDFMolGraph\nsdftomol(::Type{T}, path::AbstractString) -> T\nsdftomol(path::AbstractString) -> SDFMolGraph\n\nRead a SDFile(.sdf or .mol) and parse it into a molecule object with the given type. The given argument should be a file input stream or a file path.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/io/#SDFile-writer","page":"I/O","title":"SDFile writer","text":"","category":"section"},{"location":"moleculargraph/io/","page":"I/O","title":"I/O","text":"Modules = [MolecularGraph]\nPages   = [\"sdfilewriter.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/io/#MolecularGraph.sdfilewriter-Tuple{IO, Any}","page":"I/O","title":"MolecularGraph.sdfilewriter","text":"sdfilewriter(io::IO, mols)\nsdfilewriter(filename::AbstractString, mols)\n\nWrite molecule data to the output stream as a SDFile format file.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/io/#SMILES/SMARTS-reader","page":"I/O","title":"SMILES/SMARTS reader","text":"","category":"section"},{"location":"moleculargraph/io/","page":"I/O","title":"I/O","text":"Modules = [MolecularGraph]\nPages   = [\"smarts/base.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/io/#MolecularGraph.smartstomol-Union{Tuple{T}, Tuple{Type{T}, AbstractString}} where T<:AbstractMolGraph","page":"I/O","title":"MolecularGraph.smartstomol","text":"smartstomol(smarts::AbstractString) -> QueryMol{SmartsAtom,SmartsBond}\n\nParse SMARTS string into QueryMol object.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/io/#MolecularGraph.smilestomol-Union{Tuple{T}, Tuple{Type{T}, AbstractString}} where T<:AbstractMolGraph","page":"I/O","title":"MolecularGraph.smilestomol","text":"smilestomol(smiles::AbstractString) -> GraphMol{SmilesAtom,SmilesBond}\n\nParse SMILES string into GraphMol object.\n\nThe syntax of SMILES in this library follows both Daylight SMILES and OpenSMILES.\n\nReferences\n\nOpenSMILES Specification http://opensmiles.org/spec/open-smiles.html\nDaylight Tutorials https://www.daylight.com/dayhtml_tutorials/index.html\n\n\n\n\n\n","category":"method"},{"location":"notes/concept/#Concept-of-molecular-graph-models","page":"Concept of molecular graph models","title":"Concept of molecular graph models","text":"","category":"section"},{"location":"notes/concept/#Scope-of-MolecularGraph.jl","page":"Concept of molecular graph models","title":"Scope of MolecularGraph.jl","text":"","category":"section"},{"location":"notes/concept/","page":"Concept of molecular graph models","title":"Concept of molecular graph models","text":"MolecularGraph.jl mainly targets on small organic molecules that we deal with in medicinal chemistry. In particular, MolecularGraph.jl deals with a subset of graphs with the following characteristics:","category":"page"},{"location":"notes/concept/","page":"Concept of molecular graph models","title":"Concept of molecular graph models","text":"Undirected graph\nSimple graph, that means no self-loops and multi-edges\nTypically <100 vertices and <100 edges\nTypically degree <=4\nAlmost all are planar and many of them are outerplanar\nVertices, edges and the graph itself have multiple properties (attributes) e.g. atom symbol, bond order and metadata of the molecule\nProperties have interactions. That means changes in graph topology and vertex/edge properties can affect other vertex/edge properties.","category":"page"},{"location":"notes/concept/","page":"Concept of molecular graph models","title":"Concept of molecular graph models","text":"Therefore, following molecules are not supported and may be better to use other appropriate models.","category":"page"},{"location":"notes/concept/","page":"Concept of molecular graph models","title":"Concept of molecular graph models","text":"Inorganic molecules\nBio/synthetic polymers","category":"page"},{"location":"notes/concept/#Considerations-in-molecular-graph-implementation","page":"Concept of molecular graph models","title":"Considerations in molecular graph implementation","text":"","category":"section"},{"location":"notes/concept/","page":"Concept of molecular graph models","title":"Concept of molecular graph models","text":"According to the characteristics shown above,","category":"page"},{"location":"notes/concept/","page":"Concept of molecular graph models","title":"Concept of molecular graph models","text":"Some of the graph algorithm functions in this library do not support some of general graph structure. For example, self-loops and multi-edges are not considered.\nGraph algorithm implementations for general graphs are not always optimal for molecular graphs as well. Even well-known implementations such as deposited to Graph.jl may be reimplemented depending on benchmark results.\nThe properties of nodes and edges in molecular graphs are very different from the attributes like distances and labels in general graphs. At this time, MolecularGraph.jl does not depend on MetaGraphs.jl or MetaGraphsNext.jl and has its own data structure to deal with propagation and interaction of molecular graph properties.","category":"page"},{"location":"notes/concept/#Auto-update-mechanism-of-properties","page":"Concept of molecular graph models","title":"Auto-update mechanism of properties","text":"","category":"section"},{"location":"notes/concept/","page":"Concept of molecular graph models","title":"Concept of molecular graph models","text":"The following are examples of properties often considered and implemented in molecular graph models","category":"page"},{"location":"notes/concept/","page":"Concept of molecular graph models","title":"Concept of molecular graph models","text":"atom (vertex) properties\natom symbol e.g. C, O, N, ...\natomic charge\nwhether aromatic or not\nbond (edge) properties\nbond order\nwhether aromatic or not\ngraph topology\nconnected components (a molecule object with multiple molecules)\nsmallest set of smallest rings (SSSR)\ngraph properties\nmetadata e.g. name, compound ID","category":"page"},{"location":"notes/concept/","page":"Concept of molecular graph models","title":"Concept of molecular graph models","text":"What is important is that these properties can have interactions. In other words, many of the vertex/edge properties depend on other properties in the vertex/edge or adjacent vertexes/edges. This also means that removal or addition of vertices/edges or changes in graph topology can affect individual properties.","category":"page"},{"location":"notes/concept/","page":"Concept of molecular graph models","title":"Concept of molecular graph models","text":"To reduce this kind of side-effects, keep consistency and obtain reproducible results, molecule properties in this library is implemented based on following categories.","category":"page"},{"location":"notes/concept/","page":"Concept of molecular graph models","title":"Concept of molecular graph models","text":"primary property, or simply 'property': Information on atom symbol, charges, bond orders, etc. that define the molecule obtained from SMILES, SDFile or databases.\nsecondary property, or 'descriptor': Properties that depend on primary properties and graph topology. Methods to generate secondary properties are required to be 'pure function'. That means these methods should take only graph object (SimpleGraph) and primary property vector as arguments and should not alter objects outside the method.","category":"page"},{"location":"notes/concept/","page":"Concept of molecular graph models","title":"Concept of molecular graph models","text":"(Note that these terms are not common technical terms. Just for implementation convenience, they are categorized as above.)","category":"page"},{"location":"notes/concept/","page":"Concept of molecular graph models","title":"Concept of molecular graph models","text":"Primary properties are stored in atom/bond property objects (e.g. SMILESAtom). On the other hand, secondary properties are calculated ad-hoc, or called from caches (stored in MolGraph.state field) if it is considered to be expensive and frequently called.","category":"page"},{"location":"notes/concept/","page":"Concept of molecular graph models","title":"Concept of molecular graph models","text":"If primary properties or graph topology were changed (e.g. remove vertices), the molecule object is marked as :has_updates, and recalculated with a pre-defined routine (see preprocessing tutorial for details) when the next time the secondary property is called.","category":"page"},{"location":"moleculargraph/stereo/#Stereochemistry","page":"Stereochemistry","title":"Stereochemistry","text":"","category":"section"},{"location":"moleculargraph/stereo/","page":"Stereochemistry","title":"Stereochemistry","text":"Modules = [MolecularGraph]\nPages   = [\"stereo.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/stereo/#MolecularGraph.safe_stereo_hydrogen!-Union{Tuple{E}, Tuple{V}, Tuple{T}, Tuple{SimpleMolGraph{T, V, E}, T}} where {T, V, E}","page":"Stereochemistry","title":"MolecularGraph.safe_stereo_hydrogen!","text":"safe_stereo_hydrogen!(mol::SimpleMolGraph, v::Integer) -> Bool\n\nRearrange stereocenter properties to safely remove stereo hydrogen nodes and return the hydrogen node index.\n\nThis function is called inside rem_vertex! and rem_vertices! functions to safely remove hydrogen nodes while preserving stereocenter information.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/stereo/#MolecularGraph.set_stereobond!-Union{Tuple{E}, Tuple{V}, Tuple{T}, Tuple{SimpleMolGraph{T, V, E}, Any, Any, Any, Any}} where {T, V, E}","page":"Stereochemistry","title":"MolecularGraph.set_stereobond!","text":"set_stereocenter!(mol::SimpleMolGraph, bond, v1, v2, is_cis) -> Nothing\n\nSet stereocenter information to graph properties.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/stereo/#MolecularGraph.set_stereocenter!-Union{Tuple{E}, Tuple{V}, Tuple{T}, Tuple{SimpleMolGraph{T, V, E}, Any, Any, Any, Any, Any}} where {T, V, E}","page":"Stereochemistry","title":"MolecularGraph.set_stereocenter!","text":"set_stereocenter!(mol::SimpleMolGraph, center, looking_from, v1, v2, is_clockwise) -> Nothing\n\nSet stereocenter information to graph properties.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/stereo/#MolecularGraph.stereobond_from_sdf2d!-Tuple{MolGraph}","page":"Stereochemistry","title":"MolecularGraph.stereobond_from_sdf2d!","text":"stereobond_from_sdf2d!(mol::MolGraph) -> Nothing\n\nSet cis-trans diastereomerism information obtained from 2D SDFile.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/stereo/#MolecularGraph.stereobond_from_smiles!-Tuple{MolGraph}","page":"Stereochemistry","title":"MolecularGraph.stereobond_from_smiles!","text":"stereobond_from_smiles!(mol::MolGraph) -> Nothing\n\nSet cis-trans diastereomerism information obtained from SMILES.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/stereo/#MolecularGraph.stereocenter_from_sdf2d!-Tuple{MolGraph}","page":"Stereochemistry","title":"MolecularGraph.stereocenter_from_sdf2d!","text":"stereocenter_from_sdf2d!(mol::MolGraph) -> Nothing\n\nSet stereocenter information obtained from 2D SDFile.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/stereo/#MolecularGraph.stereocenter_from_smiles!-Tuple{MolGraph}","page":"Stereochemistry","title":"MolecularGraph.stereocenter_from_smiles!","text":"stereocenter_from_smiles!(mol::MolGraph) -> Nothing\n\nSet stereocenter information obtained from SMILES.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#Molecular-properties","page":"Properties and descriptors","title":"Molecular properties","text":"","category":"section"},{"location":"moleculargraph/properties/","page":"Properties and descriptors","title":"Properties and descriptors","text":"Modules = [MolecularGraph]\nPages   = [\"properties.jl\", \"wclogp.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/properties/#MolecularGraph.apparent_valence-Tuple{Any, Any}","page":"Properties and descriptors","title":"MolecularGraph.apparent_valence","text":"apparent_valence(mol::SimpleMolGraph) -> Vector{Int}\n\nReturn a vector of size n representing the number of total bond order incident to 1 to nth atoms of the given molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.atom_counter-Tuple{SimpleMolGraph}","page":"Properties and descriptors","title":"MolecularGraph.atom_counter","text":"atom_counter(mol::SimpleMolGraph) -> Dict{Symbol,Int}\n\nCount the number of atoms and return symbol => count dict.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.atom_symbol-Tuple{SimpleMolGraph}","page":"Properties and descriptors","title":"MolecularGraph.atom_symbol","text":"atom_symbol(mol::MolGraph) -> Vector{Symbol}\n\nReturn a vector of size n representing atom symbols of 1 to nth atoms of the given molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.bond_order-Tuple{SimpleMolGraph}","page":"Properties and descriptors","title":"MolecularGraph.bond_order","text":"bond_order(mol::MolGraph) -> Vector{Int}\n\nReturn a vector of size n representing bond order of 1 to nth bonds of the given molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.charge-Tuple{SimpleMolGraph}","page":"Properties and descriptors","title":"MolecularGraph.charge","text":"charge(mol::MolGraph) -> Vector{Int}\n\nReturn a vector of size n representing atom charges of 1 to nth atoms of the given molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.connectivity-Tuple{SimpleMolGraph}","page":"Properties and descriptors","title":"MolecularGraph.connectivity","text":"connectivity(mol::SimpleMolGraph) -> Vector{Int}\n\nReturn a vector of size n representing the number of total atoms (implicit and explicit) connected to 1 to nth atoms of the given molecule.\n\nThis property corresponds to SMARTS X query.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.edge_which_ring-Tuple{SimpleMolGraph}","page":"Properties and descriptors","title":"MolecularGraph.edge_which_ring","text":"edge_which_ring(mol::SimpleMolGraph) -> Vector{Vector{Int}}\n\nReturn a vector of size n representing sssr membership of 1 to nth bonds of the given molecule.\n\nSSSR membership is represented as a set of SSSR indices assigned to each rings. This means bonds that have the same SSSR index belong to the same SSSR.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.empirical_formula-Tuple{SimpleMolGraph}","page":"Properties and descriptors","title":"MolecularGraph.empirical_formula","text":"empirical_formula(mol::MolGraph) -> String\n\nReturn the empirical formula in Hill system.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.explicit_hydrogens-Tuple{Any, Any}","page":"Properties and descriptors","title":"MolecularGraph.explicit_hydrogens","text":"explicit_hydrogens(mol::SimpleMolGraph) -> Vector{Int}\n\nReturn a vector of size n representing the number of explicit hydrogens connected to 1 to nth atoms of the given molecule.\n\n\"Explicit\" means hydrogens are explicitly represented as graph nodes.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.fused_rings-Tuple{Graphs.SimpleGraphs.SimpleGraph}","page":"Properties and descriptors","title":"MolecularGraph.fused_rings","text":"fused_rings(mol::SimpleMolGraph{T}) -> Vector{Vector{T}}\n\nReturn vectors of fused ring node sets.\n\nA fused ring is defined as a 2-edge connected components in terms of graph theory. Spirocyclic structures are considered to be part of a fused ring.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.heavy_atom_count-Tuple{SimpleMolGraph}","page":"Properties and descriptors","title":"MolecularGraph.heavy_atom_count","text":"heavy_atom_count(mol::SimpleMolGraph) -> Int\n\nReturn the total number of non-hydrogen atoms.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.heavy_atoms-Tuple{SimpleMolGraph}","page":"Properties and descriptors","title":"MolecularGraph.heavy_atoms","text":"heavy_atoms(mol::SimpleMolGraph) -> Vector{Int}\n\nReturn a vector of size n representing the number of non-hydrogen atoms connected to 1 to nth atoms of the given molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.hybridization-NTuple{5, Any}","page":"Properties and descriptors","title":"MolecularGraph.hybridization","text":"hybridization(mol::SimpleMolGraph) -> Vector{Int}\n\nReturns a vector of size n representing the orbital hybridization symbols (:sp3, :sp2, :sp or :none) of 1 to nth atoms of the given molecule.\n\nThe hybridization value in inorganic atoms and non-typical organic atoms will be :none (e.g. s, sp3d and sp3d2 orbitals). Note that this is a simplified geometry descriptor for substructure matching and does not reflect actual molecular orbital hybridization.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.hydrogen_acceptor_count-Tuple{SimpleMolGraph}","page":"Properties and descriptors","title":"MolecularGraph.hydrogen_acceptor_count","text":"hydrogen_acceptor_count(mol::SimpleMolGraph) -> Int\n\nReturn the total number of hydrogen bond acceptors (N, O and F).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.hydrogen_donor_count-Tuple{SimpleMolGraph}","page":"Properties and descriptors","title":"MolecularGraph.hydrogen_donor_count","text":"hydrogen_donor_count(mol::SimpleMolGraph) -> Int\n\nReturn the total number of hydrogen bond donors (O and N attached to hydrogens).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.implicit_hydrogens-Tuple{SimpleMolGraph}","page":"Properties and descriptors","title":"MolecularGraph.implicit_hydrogens","text":"implicit_hydrogens(mol::SimpleMolGraph) -> Vector{Int}\n\nReturn a vector of size n representing the number of implicit hydrogens connected to 1 to nth atoms of the given molecule.\n\n\"Implicit\" means hydrogens are not represented as graph nodes, but it can be infered from the intrinsic valence of typical organic atoms.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.is_aromatic-Tuple{Any, Any, Any}","page":"Properties and descriptors","title":"MolecularGraph.is_aromatic","text":"is_aromatic(mol::SimpleMolGraph) -> Vector{Bool}\n\nReturns a vector of size n representing whether 1 to nth atoms of the given molecule belong to an aromatic ring or not.\n\nSee is_ring_aromatic.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.is_edge_aromatic-Tuple{Any, Any, Any}","page":"Properties and descriptors","title":"MolecularGraph.is_edge_aromatic","text":"is_edge_aromatic(mol::SimpleMolGraph) -> Vector{Bool}\n\nReturns a vector of size n representing whether 1 to nth bonds of the given molecule belong to an aromatic ring or not.\n\nSee is_ring_aromatic.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.is_edge_in_ring-Tuple{MolGraph}","page":"Properties and descriptors","title":"MolecularGraph.is_edge_in_ring","text":"is_edge_in_ring(mol::MolGraph) -> Vector{Bool}\n\nReturn a vector of size n representing whether 1 to nth bonds of the given molecule belong to a ring or not.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.is_in_ring-Tuple{MolGraph}","page":"Properties and descriptors","title":"MolecularGraph.is_in_ring","text":"is_in_ring(mol::MolGraph) -> Vector{Bool}\n\nReturn a vector of size n representing whether 1 to nth atoms of the given molecule belong to a ring or not.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.is_ring_aromatic-NTuple{7, Any}","page":"Properties and descriptors","title":"MolecularGraph.is_ring_aromatic","text":"is_ring_aromatic(mol::SimpleMolGraph) -> Vector{Bool}\n\nReturns a vector of size n representing whether first to n-th rings of a given molecule are aromatic or not.\n\nThis is a binary descriptor based on a chemoinformatic algorithm and may not reflect actual molecular orbitals. Atypical aromaticities such as Moebius aromaticity are not considered.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.is_rotatable-NTuple{4, Any}","page":"Properties and descriptors","title":"MolecularGraph.is_rotatable","text":"is_rotatable(mol::SimpleMolGraph) -> Vector{Bool}\n\nReturn a vector of size n representing whether 1 to nth bonds of the given molecule are rotatable or not.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.lone_pair-Tuple{Any, Any, Any}","page":"Properties and descriptors","title":"MolecularGraph.lone_pair","text":"lone_pair(mol::MolGraph) -> Vector{Int}\n\nReturn a vector of size n representing the number of lone pairs of 1 to nth atoms of the given molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.molecular_formula-Tuple{SimpleMolGraph}","page":"Properties and descriptors","title":"MolecularGraph.molecular_formula","text":"molecular_formula(mol::MolGraph) -> String\n\nReturn the molecular formula in Hill system.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.multiplicity-Tuple{SimpleMolGraph}","page":"Properties and descriptors","title":"MolecularGraph.multiplicity","text":"multiplicity(mol::MolGraph) -> Vector{Int}\n\nReturn a vector of size n representing atom multiplicities of 1 to nth atoms of the given molecule (1: non-radical, 2: radical, 3: biradical).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.pi_electron-NTuple{4, Any}","page":"Properties and descriptors","title":"MolecularGraph.pi_electron","text":"pi_electron(mol::SimpleMolGraph) -> Vector{Int}\n\nReturns a vector of size n representing the number of pi electrons of 1 to nth atoms of the given molecule.\n\nThe number of pi electrons is calculated as valence - connectivity. Typically, each atom connected to double bonds adds one pi electron for each, and each atom connected to a triple bond adds two pi electrons.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.ring_count-Tuple{MolGraph}","page":"Properties and descriptors","title":"MolecularGraph.ring_count","text":"ring_count(mol::MolGraph) -> Vector{Int}\n\nReturn a vector of size n representing the number of sssr that 1 to nth atoms of the given molecule belong to.\n\nThis property corresponds to SMARTS R query.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.rotatable_count-Tuple{SimpleMolGraph}","page":"Properties and descriptors","title":"MolecularGraph.rotatable_count","text":"rotatable_count(mol::SimpleMolGraph) -> Int\n\nReturn the total number of rotatable bonds.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.smallest_ring-Tuple{SimpleMolGraph}","page":"Properties and descriptors","title":"MolecularGraph.smallest_ring","text":"smallest_ring(mol::SimpleMolGraph) -> Vector{Int}\n\nReturn a vector of size n representing the size of the smallest sssr that 1 to nth atoms of the given molecule belong to. \n\nIf the node is not in a ring, the value would be 0. This property corresponds to SMARTS r query.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.sssr-Tuple{SimpleMolGraph}","page":"Properties and descriptors","title":"MolecularGraph.sssr","text":"sssr(mol::SimpleMolGraph{T}) -> Vector{Vector{T}}\n\nReturn vectors of ring nodes representing small set of smallest rings (SSSR).\n\nSee mincyclebasis.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.total_hydrogens-Tuple{SimpleMolGraph}","page":"Properties and descriptors","title":"MolecularGraph.total_hydrogens","text":"total_hydrogens(mol::SimpleMolGraph) -> Vector{Int}\n\nReturn a vector of size n representing the number of total hydrogens (implicit and explicit) connected to 1 to nth atoms of the given molecule.\n\nThis property corresponds to SMARTS H query.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.valence-Tuple{Any, Any, Any}","page":"Properties and descriptors","title":"MolecularGraph.valence","text":"valence(mol::SimpleMolGraph) -> Vector{Int}\n\nReturn a vector of size n representing the intrinsic valence of 1 to nth atoms of the given molecule.\n\nThe number of implicit hydrogens would be calculated based on the valence. The valence of a hypervalent atom or a non-organic atom is the same as its apparent_valence. This property corresponds to SMARTS v query.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.which_fused_ring-Tuple{SimpleMolGraph}","page":"Properties and descriptors","title":"MolecularGraph.which_fused_ring","text":"which_fused_ring(mol::SimpleMolGraph) -> Vector{Vector{Int}}\n\nReturn a vector of size n representing fused_rings membership of 1 to nth atoms of the given molecule.\n\nFused ring membership is represented as a set of fused ring indices assigned to each fused rings. This means atoms that have the same fused ring index belong to the same fused ring.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.which_ring-Union{Tuple{SimpleMolGraph{T, V, E}}, Tuple{E}, Tuple{V}, Tuple{T}} where {T, V, E}","page":"Properties and descriptors","title":"MolecularGraph.which_ring","text":"which_ring(mol::SimpleMolGraph) -> Vector{Vector{Int}}\n\nReturn a vector of size n representing sssr membership of 1 to nth nodes of the given graph.\n\nSSSR membership is represented as a vector of SSSR indices assigned to each rings. This means nodes that have the same SSSR index belong to the same SSSR.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.wclogp-Tuple{MolGraph}","page":"Properties and descriptors","title":"MolecularGraph.wclogp","text":"wclogp(mol::GraphMol) -> Float64\n\nReturn predicted logP value calculated by using Wildman and Crippen method.\n\nReference\n\nWildman, S. A. and Crippen, G. M. (1999). Prediction of Physicochemical Parameters by Atomic Contributions. Journal of Chemical Information and Modeling, 39(5), 868–873. https://doi.org/10.1021/ci990307l\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.wclogptype-Tuple{MolGraph}","page":"Properties and descriptors","title":"MolecularGraph.wclogptype","text":"wclogptype(mol::MolGraph)\n\nReturn Wildman-Crippen LogP atom types.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/coordinates/#Coordinates","page":"Coordinates","title":"Coordinates","text":"","category":"section"},{"location":"moleculargraph/coordinates/#Coordinates-2","page":"Coordinates","title":"Coordinates","text":"","category":"section"},{"location":"moleculargraph/coordinates/","page":"Coordinates","title":"Coordinates","text":"Modules = [MolecularGraph]\nPages   = [\"coords.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/coordinates/#MolecularGraph.coordgen-NTuple{5, Any}","page":"Coordinates","title":"MolecularGraph.coordgen","text":"coordgen(mol::MolGraph) -> Tuple{Array{Int,1},Array{Int,1}}\n\nGenerate 2D coordinates by using Schrodinger's coordgenlibs.\n\nThis will returns a tuple of coords and styles arrays. coords is a size(n, 2) matrix where n is atom count, which stores 2D coordinates (x, y) of each atoms. styles is a size e vector of wedge notation of stereobond, where e is bond count.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/coordinates/#Geometry-basics","page":"Coordinates","title":"Geometry basics","text":"","category":"section"},{"location":"moleculargraph/coordinates/","page":"Coordinates","title":"Coordinates","text":"Modules = [MolecularGraph]\nPages   = [\"geometry/cartesian.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/coordinates/#MolecularGraph.distance-Tuple{MGPoint, MGPoint}","page":"Coordinates","title":"MolecularGraph.distance","text":"distance(u::MGPoint, v::MGPoint) -> Float64\ndistance(s::Segment) -> Float64\ndistance(coords::AbstractMatrix{T}) where {T<:Real} -> Float64\n\nReturn distance between two endpoints.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/coordinates/#MolecularGraph.isclockwise-Tuple{AbstractMatrix{Float64}}","page":"Coordinates","title":"MolecularGraph.isclockwise","text":"isclockwise(vertices::AbstractMatrix{Float64}) -> Union{Bool,Nothing}\n\nReturn true/false if given vertices of a polygon in 2D space are placed clockwise/anticlockwise. Return nothing if the polygon is self-intersecting or some vertices are overlapped.  \n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/coordinates/#MolecularGraph.midpoint-Tuple{MGPoint, MGPoint}","page":"Coordinates","title":"MolecularGraph.midpoint","text":"midpoint(u::MGPoint, v::MGPoint) -> MGPoint\nmidpoint(s::Segment) -> MGPoint\nmidpoint(coords::AbstractMatrix{T}) where {T<:Real} -> AbstractMatrix\n\nReturn the midpoint of u and v.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/coordinates/#MolecularGraph.unitvector-Tuple{MGPoint, MGPoint}","page":"Coordinates","title":"MolecularGraph.unitvector","text":"unitvector(u::MGPoint, v::MGPoint) -> MGPoint\nunitvector(s::Segment) -> MGPoint\nunitvector(coords::AbstractMatrix{T}) where {T<:Real} -> AbstractMatrix\n\nReturn u -> v vector of length 1.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#Structure-match","page":"Structure match","title":"Structure match","text":"","category":"section"},{"location":"moleculargraph/structurematch/","page":"Structure match","title":"Structure match","text":"Modules = [MolecularGraph]\nPages   = [\"structurematch.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/structurematch/#MolecularGraph.connected_mcis-Tuple{MolGraph, MolGraph}","page":"Structure match","title":"MolecularGraph.connected_mcis","text":"connected_mcis(mol1::MolGraph, mol2::MolGraph; kwargs...) -> (Dict, Symbol)\nconnected_mces(mol1::MolGraph, mol2::MolGraph; kwargs...) -> (Dict, Symbol)\n\nCompute connected maximum common substructure (MCS) of mol1 and mol2.\n\nKeyword arguments\n\ntimeout(Real): abort calculation and return suboptimal results if the execution\n\ntime has reached the given value (default=60, in seconds).\n\ntargetsize(Int): abort calculation and return suboptimal result so far if the\n\ngiven mcs size achieved.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.disconnected_mcis-Tuple{MolGraph, MolGraph}","page":"Structure match","title":"MolecularGraph.disconnected_mcis","text":"disconnected_mcis(mol1::MolGraph, mol2::MolGraph; kwargs...) -> (Dict, Symbol)\ndisconnected_mces(mol1::MolGraph, mol2::MolGraph; kwargs...) -> (Dict, Symbol)\n\nCompute disconnected maximum common substructure (MCS) of mol1 and mol2.\n\nKeyword arguments\n\ntimeout(Real): abort calculation and return suboptimal results if the execution\n\ntime has reached the given value (default=60, in seconds).\n\ntargetsize(Int): abort calculation and return suboptimal result so far if the\n\ngiven mcs size achieved.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.edge_substruct_matches-Tuple{MolGraph, MolGraph}","page":"Structure match","title":"MolecularGraph.edge_substruct_matches","text":"edge_substruct_matches(mol1, mol2; kwargs...) -> Iterator\n\nReturn a lazy iterator that generate node mappings between mol and query if mol has query as a substructure. See substruct_matches for available options.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.emaptonmap-Tuple{Any, MolGraph, MolGraph}","page":"Structure match","title":"MolecularGraph.emaptonmap","text":"nmap = emaptonmap(emap, mol, query)\n\nConvert an edge-based mapping, of the form returned by edge_substruct_matches, into a map between nodes. Commonly, nmap[i] is a length-1 vector [j], where i=>j is the mapping from nodeattr(query, i) to nodeattr(mol, j). In cases where the mapping is ambiguous, nmap[i] may be multivalued.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.ematchgen-Tuple{MolGraph, MolGraph}","page":"Structure match","title":"MolecularGraph.ematchgen","text":"ematchgen(mol1::MolGraph, mol2::MolGraph) -> Function\nematchgen(mol::MolGraph{T1,V1,E1}, qmol::MolGraph{T2,V2,E2}\n    ) where {T1,T2,V1,V2,E1,E2<:QueryTree}\nematchgen(mol1::MolGraph{T1,V1,E1}, mol2::MolGraph{T2,V2,E2}\n    ) where {T1,T2,V1,V2,E1<:QueryTree,E2<:QueryTree}\n\nReturn a default edge attribute matching function for graph isomorphism algorithms.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.exact_matches-Tuple{MolGraph, MolGraph}","page":"Structure match","title":"MolecularGraph.exact_matches","text":"exact_matches(mol1, mol2; kwargs...) -> Iterator\n\nReturn a lazy iterator that generate node mappings between mol and query if these are exactly same. See substruct_matches for available options.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.has_edge_substruct_match-Tuple{Any, Any}","page":"Structure match","title":"MolecularGraph.has_edge_substruct_match","text":"has_edge_substruct_match(mol1, mol2; kwargs...) -> Bool\n\nReturn whether mol has query as a substructure. See substruct_matches for available options.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.has_exact_match-Tuple{Any, Any}","page":"Structure match","title":"MolecularGraph.has_exact_match","text":"has_exact_match(mol1, mol2; kwargs...) -> Bool\n\nReturn whether mol and query have exactly the same structure. See substruct_matches for available options.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.has_node_substruct_match-Tuple{Any, Any}","page":"Structure match","title":"MolecularGraph.has_node_substruct_match","text":"has_node_substruct_match(mol1, mol2; kwargs...) -> Bool\n\nReturn whether mol has query as a substructure. See substruct_matches for available options.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.has_substruct_match-Tuple{Any, Any}","page":"Structure match","title":"MolecularGraph.has_substruct_match","text":"has_substruct_match(mol1, mol2; kwargs...) -> Bool\n\nReturn whether mol has query as a substructure. See substruct_matches for available options.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.node_substruct_matches-Tuple{MolGraph, MolGraph}","page":"Structure match","title":"MolecularGraph.node_substruct_matches","text":"node_substruct_matches(mol1, mol2; kwargs...) -> Iterator\n\nReturn a lazy iterator that generate node mappings between mol and query if mol has query as a substructure. See substruct_matches for available options.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.substruct_matches-Tuple{MolGraph, MolGraph}","page":"Structure match","title":"MolecularGraph.substruct_matches","text":"substruct_matches(mol1, mol2; kwargs...) -> Iterator\n\nReturn a lazy iterator that generate node mappings between mol and query if mol has query as a substructure.\n\noptions\n\nvmatch::Function: a function for semantic atom attribute matching (default: MolecularGraph.vmatch)\nematch::Function: a function for semantic bond attribute matching (default: MolecularGraph.ematch)\nmandatory::Dict{Int,Int}: mandatory node mapping (or edge mapping if matchtype=:edgeinduced)\nforbidden::Dict{Int,Int}: forbidden node mapping (or edge mapping if matchtype=:edgeinduced)\ntimeout::Union{Int,Nothing}: if specified, abort vf2 calculation when the time reached and return empty iterator (default: 10 seconds).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.tdmcis-Tuple{MolGraph, MolGraph}","page":"Structure match","title":"MolecularGraph.tdmcis","text":"tdmcis(mol1::MolGraph, mol2::MolGraph; kwargs...) -> (Dict, Symbol)\ntdmces(mol1::MolGraph, mol2::MolGraph; kwargs...) -> (Dict, Symbol)\n\nCompute disconnected MCS of mol1 and mol2 with topological constraint (td-MCS).\n\nKeyword arguments\n\ndiameter(Int): distance cutoff for topological constraint.\ntolerance(Int): distance mismatch tolerance for topological constraint.\ntimeout(Real): abort calculation and return suboptimal results if the execution\n\ntime has reached the given value (default=60, in seconds).\n\ntargetsize(Int): abort calculation and return suboptimal result so far if the\n\ngiven mcs size achieved.\n\nReferences\n\nKawabata, T. (2011). Build-Up Algorithm for Atomic Correspondence between\n\nChemical Structures. Journal of Chemical Information and Modeling, 51(8), 1775–1787. https://doi.org/10.1021/ci2001023\n\nhttps://www.jstage.jst.go.jp/article/ciqs/2017/0/2017P4/article/-char/en\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.vmatchgen-Tuple{MolGraph, MolGraph}","page":"Structure match","title":"MolecularGraph.vmatchgen","text":"vmatchgen(mol1::MolGraph, mol2::MolGraph) -> Function\nvmatchgen(mol1::MolGraph{T1,V1,E1}, mol2::MolGraph{T2,V2,E2}\n    ) where {T1,T2,V1,V2<:QueryTree,E1,E2} -> Function\nvmatchgen(mol1::MolGraph{T1,V1,E1}, mol2::MolGraph{T2,V2,E2}\n    ) where {T1,T2,V1<:QueryTree,V2<:QueryTree,E1,E2}\n\nReturn a default vertex attribute matching function for graph isomorphism algorithms.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#Preprocessing","page":"Preprocessing","title":"Preprocessing","text":"","category":"section"},{"location":"moleculargraph/preprocess/","page":"Preprocessing","title":"Preprocessing","text":"Modules = [MolecularGraph]\nPages   = [\"preprocess.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/preprocess/#MolecularGraph.add_hydrogens!-Union{Tuple{SimpleMolGraph{T, V, E}}, Tuple{E}, Tuple{V}, Tuple{T}} where {T, V, E}","page":"Preprocessing","title":"MolecularGraph.add_hydrogens!","text":"add_hydrogens!(mol::SimpleMolGraph)\n\nReturn the molecule with all hydrogen nodes explicitly attached.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.all_hydrogens-Union{Tuple{SimpleMolGraph{T, V, E}}, Tuple{E}, Tuple{V}, Tuple{T}} where {T, V, E}","page":"Preprocessing","title":"MolecularGraph.all_hydrogens","text":"all_hydrogens(mol::SimpleMolGraph{T,V,E}) -> Vector{T}\n\nReturn a vector of all hydrogen nodes.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.depolarize-Tuple{SimpleMolGraph}","page":"Preprocessing","title":"MolecularGraph.depolarize","text":"depolarize(mol::SimpleMolGraph; negative=:O, positive=[:C, :P]) -> Nothing\n\nDepolarize dipole double bonds of the molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.deprotonate_oniums-Tuple{SimpleMolGraph}","page":"Preprocessing","title":"MolecularGraph.deprotonate_oniums","text":"deprotonate_oniums(mol::SimpleMolGraph) -> Vector{Int}\n\nDeprotonate onium groups of the molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.extract_largest_component!-Tuple{SimpleMolGraph}","page":"Preprocessing","title":"MolecularGraph.extract_largest_component!","text":"extract_largest_component!(mol::SimpleMolGraph) -> Nothing\n\nReturn the largest connected component of the molecular graph.\n\nThis should be useful when you want to remove salt and water molecules from the molecular graph simply. On the other hand, this can remove important components from the mixture so carefully apply this preprocess method.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.kekulize-Union{Tuple{SimpleMolGraph{T, V, E}}, Tuple{E}, Tuple{V}, Tuple{T}} where {T, V, E}","page":"Preprocessing","title":"MolecularGraph.kekulize","text":"kekulize(mol::SimpleMolGraph) -> Vector{Int}\n\nReturn an array of bond orders with kekulization applied.\n\nDouble bonds and single bonds will be assigned to aromatic rings which consist of SMILES lowercase atoms (called Kekulization). Kekulization is necessary for the valence and implicit hydrogens of a molecule parsed from SMILES to be correctly evaluated.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.largest_component_nodes-Union{Tuple{SimpleMolGraph{T, V, E}}, Tuple{E}, Tuple{V}, Tuple{T}} where {T, V, E}","page":"Preprocessing","title":"MolecularGraph.largest_component_nodes","text":"largest_component_nodes(mol::SimpleMolGraph) -> Vector{Int}\n\nReturn a vector of nodes in the largest connected component.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.polarize-Tuple{SimpleMolGraph}","page":"Preprocessing","title":"MolecularGraph.polarize","text":"polarize(mol::SimpleMolGraph; negative=:O, positive=[:N, :S]) -> Nothing\n\nPolarize dipole double bonds of the molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.protonate_acids-Tuple{SimpleMolGraph}","page":"Preprocessing","title":"MolecularGraph.protonate_acids","text":"protonate_acids(mol::SimpleMolGraph) -> Vector{Int}\n\nProtonate oxo(thio) anion groups of the molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.removable_hydrogens-Union{Tuple{SimpleMolGraph{T, V, E}}, Tuple{E}, Tuple{V}, Tuple{T}} where {T, V, E}","page":"Preprocessing","title":"MolecularGraph.removable_hydrogens","text":"removable_hydrogens(mol::SimpleMolGraph{T,V,E}) -> Vector{T}\n\nReturn a vector of removable hydrogen nodes.\n\nRemovable hydrogens are not charged, have no unpaired electron, have no specific mass, are non-stereospecific and are attached to organic heavy atoms.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.remove_all_hydrogens!-Union{Tuple{SimpleMolGraph{T, V, E}}, Tuple{E}, Tuple{V}, Tuple{T}} where {T, V, E}","page":"Preprocessing","title":"MolecularGraph.remove_all_hydrogens!","text":"remove_all_hydrogens!(mol::SimpleMolGraph{T,V,E}) -> Vector{T}\n\nRemove all hydrogen vertices from the molecule.\n\nThis returns vmap array similar to Graphs.rem_vertices!.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.remove_hydrogens!-Tuple{SimpleMolGraph}","page":"Preprocessing","title":"MolecularGraph.remove_hydrogens!","text":"remove_hydrogens!(mol::SimpleMolGraph{T,V,E}) -> Vector{T}\n\nRemove following hydrogen vertices from the molecule: that are not charged, have no unpaired electron, have no specific mass, are non-stereospecific and are attached to organic heavy atoms.\n\nThis returns vmap array similar to Graphs.rem_vertices!.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.to_allene_like-Tuple{SimpleMolGraph}","page":"Preprocessing","title":"MolecularGraph.to_allene_like","text":"to_allene_like(mol::SimpleMolGraph) -> Nothing\n\nStandardize the molecule so that all 1,3-dipole groups are represented as allene-like structure (e.g. Diazo group [C-][N+]#N -> C=[N+]=[N-]).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.to_triple_bond-Tuple{SimpleMolGraph}","page":"Preprocessing","title":"MolecularGraph.to_triple_bond","text":"to_triple_bond(mol::SimpleMolGraph) -> Nothing\n\nStandardize the molecule so that all 1,3-dipole groups are represented as triple bond and single bond (e.g. Diazo group C=[N+]=[N-] -> [C-][N+]#N).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/draw/#Molecular-structure-drawing","page":"Structure drawing","title":"Molecular structure drawing","text":"","category":"section"},{"location":"moleculargraph/draw/","page":"Structure drawing","title":"Structure drawing","text":"Modules = [MolecularGraph]\nPages   = [\"./draw/color.jl\", \"./draw/draw2d.jl\", \"./draw/draw3d.jl\", \"./draw/interface.jl\", \"./draw/svg.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/draw/#MolecularGraph.ballstick-Tuple","page":"Structure drawing","title":"MolecularGraph.ballstick","text":"ballstick(mol::UndirectedGraph; radii=0.3, bonddiameter=0.1)\n\nRepresent mol as a ball-and-stick model in three dimensions. mol should have 3d atom positions represented in Angstroms. 3D SDF files can be downloaded from sites such as PubChem.\n\nradii optionally specifies the radii of the balls, in Angstroms. bonddiameter optionally specifies the radii of the sticks, in Angstroms.\n\nThis function requires that you load one of the backends of the Makie/GLMakie/CairoMakie family.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/draw/#MolecularGraph.spacefilling-Tuple","page":"Structure drawing","title":"MolecularGraph.spacefilling","text":"spacefilling(mol::UndirectedGraph; radii=\"van der Waals\")\n\nRepresent mol as a space-filling (Calotte) model in three dimensions. mol should have 3d atom positions represented in Angstroms. (3D SDF files can be downloaded from sites such as PubChem.) The two supported options for radii are \"van der Waals\" and \"covalent\"; the former are available only for main-group elements, and the latter are available for all.\n\nThis function requires that you load one of the backends of the Makie/GLMakie/CairoMakie family.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/draw/#MolecularGraph.stick-Tuple","page":"Structure drawing","title":"MolecularGraph.stick","text":"stick(mol::UndirectedGraph; size=0.3)\n\nRepresent mol as a stick model in three dimensions. mol should have 3d atom positions represented in Angstroms. 3D SDF files can be downloaded from sites such as PubChem.\n\nsize optionally specifies the width of the sticks, in Angstroms.\n\nThis function requires that you load one of the backends of the Makie/GLMakie/CairoMakie family.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/draw/#MolecularGraph.wire-Tuple","page":"Structure drawing","title":"MolecularGraph.wire","text":"wire(mol::UndirectedGraph; size=0.1)\n\nRepresent mol as a wire-frame model in three dimensions. mol should have 3d atom positions represented in Angstroms. 3D SDF files can be downloaded from sites such as PubChem.\n\nsize optionally specifies the width of the bonds, in Angstroms.\n\nThis function requires that you load one of the backends of the Makie/GLMakie/CairoMakie family.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/draw/#MolecularGraph.drawsvg-Tuple{SimpleMolGraph}","page":"Structure drawing","title":"MolecularGraph.drawsvg","text":"drawsvg(mol::SimpleMolGraph) -> String\n\nGenerate molecular structure image as a SVG format string.\n\nwidth and height specifies the size of the image (width and height attribute of svg tag).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/draw/#MolecularGraph.html_fixed_size-Tuple{Any, Any, Any}","page":"Structure drawing","title":"MolecularGraph.html_fixed_size","text":"html_fixed_size(mol::SimpleMolGraph, width, height) -> HTML{String}\n\nGenerate fixed-size HTML wrapper for the SVG element.\n\nThe width and height args can be numeric values (converted to px) or CSS strings like 100%.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/draw/#MolecularGraph.html_grid-Tuple{Any, Any, Any}","page":"Structure drawing","title":"MolecularGraph.html_grid","text":"html_grid(mols, cols, rowheight) -> HTML{String}\n\nGenerate grid layout HTML wrapper for the SVG elements.\n\ncols - number of columns in the grid. rowheight - numeric value (converted to px) or CSS string like 100%.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/mass/#Molecular-mass-and-weight","page":"Molecular mass/weight","title":"Molecular mass and weight","text":"","category":"section"},{"location":"moleculargraph/mass/","page":"Molecular mass/weight","title":"Molecular mass/weight","text":"Modules = [MolecularGraph]\nPages   = [\"mass.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/mass/#MolecularGraph.exact_mass-Tuple{Symbol}","page":"Molecular mass/weight","title":"MolecularGraph.exact_mass","text":"exact_mass(atomsymbol::Symbol, [digits::Int]) -> Float64\nexact_mass(atom, [digits::Int]) -> Float64\nexact_mass(mol::MolGraph, [digits::Int]) -> Float64\n\nReturn calculated exact mass.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/mass/#MolecularGraph.exact_mass_unc","page":"Molecular mass/weight","title":"MolecularGraph.exact_mass_unc","text":"exact_mass_unc(atomsymbol::Symbol, [number::Union{Int, Nothing}]) -> Tuple{Float64,Float64}\nexact_mass_unc(atom) -> Tuple{Float64,Float64}\nexact_mass_unc(mol::MolGraph) -> Tuple{Float64,Float64}\n\nReturn a tuple of calculated exact mass and its uncertainty.\n\nIf number is not given or Atom.mass is not specified, monoisotopic mass will be used instead.\n\n\n\n\n\n","category":"function"},{"location":"moleculargraph/mass/#MolecularGraph.isotopic_composition-Tuple{Symbol, Int64}","page":"Molecular mass/weight","title":"MolecularGraph.isotopic_composition","text":"isotopiccomposition(atomsymbol::Symbol, number::Int; threshold=0.001\n    ) -> Vector{Tuple{Float64,Float64}}\nisotopiccomposition(mol::MolGraph; threshold=0.001\n    ) -> Vector{Tuple{Float64,Float64}}\n\nReturn isotopic composition of the atoms/molecule as a vector of tuples of mass and composition.\n\nRecords that have lower abundance than the given threshold will be filtered out (default 0.001 = 0.1%)\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/mass/#MolecularGraph.massspec_peaks-Tuple{MolGraph}","page":"Molecular mass/weight","title":"MolecularGraph.massspec_peaks","text":"massspec_peaks(mol::MolGraph; threshold=0.001) -> Matrix{Float64}\n\nReturn a vector of tuples of each isotopic masses and their relative intensity in the simulated mass spectrum (base peak intensity = 100).\n\nRecords that have lower abundance (not peak intensity) than the given threshold will be filtered out (default 0.001 = 0.1%)\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/mass/#MolecularGraph.monoiso_mass-Tuple{Symbol}","page":"Molecular mass/weight","title":"MolecularGraph.monoiso_mass","text":"monoiso_mass(atomsymbol::Symbol, [digits::Int]) -> Float64\nmonoiso_mass(atom, [digits::Int]) -> Float64\nmonoiso_mass(mol::MolGraph, [digits::Int]) -> Float64\n\nReturn monoisotopic mass of the atom/molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/mass/#MolecularGraph.monoiso_mass_unc-Tuple{Symbol}","page":"Molecular mass/weight","title":"MolecularGraph.monoiso_mass_unc","text":"monoiso_mass_unc(atomsymbol::Symbol) -> Tuple{Float64,Float64}\nmonoiso_mass_unc(atom) -> Tuple{Float64,Float64}\nmonoiso_mass_unc(mol::MolGraph) -> Tuple{Float64,Float64}\n\nReturn a tuple of monoisotopic mass of the atom/molecule and its uncertainty.\n\nMonoisotopic mass is the relative atomic mass of the most abundant isotope. Even if there is specific Atom.mass value, it will be ignored.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/mass/#MolecularGraph.nominal_mass-Tuple{Symbol}","page":"Molecular mass/weight","title":"MolecularGraph.nominal_mass","text":"nominal_mass(atomsymbol::Symbol) -> Int\nnominal_mass(atom) -> Int\nnominal_mass(mol::MolGraph) -> Int\n\nReturn nominal mass of the atom/molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/mass/#MolecularGraph.simulate_massspec-Tuple{Vector{Tuple{Float64, Float64}}}","page":"Molecular mass/weight","title":"MolecularGraph.simulate_massspec","text":"simulate_massspec(peaks::Vector{Tuple{Float64,Float64}};\n    resolution=10000, rate=0.01) -> Matrix{Float64}\nsimulate_massspec(mol::MolGraph;\n    threshold=0.001, resolution=10000, rate=0.01) -> Matrix{Float64}\n\nReturn a matrix of simulate mass spectrum (dim 1: datapoints, dim 2: mass and intensity).\n\nNote that the peaks are just calculated from the isotopic composition of atoms (not intended for simulation of fragmentation).\n\nUsage (with Plot.jl)\n\nusing MolecularGraph\nusing Plots\ngr()\nPlots.GRBackend()\n\nmol = smilestomol(\"CCO\")\ndata = simulatemassspec(mol)\nplot(\n    data[:, 1], data[:, 2],\n    leg=false, xlabel = \"Mass\", ylabel = \"Intensity\"\n)\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/mass/#MolecularGraph.standard_weight-Tuple{Symbol}","page":"Molecular mass/weight","title":"MolecularGraph.standard_weight","text":"standard_weight(atomsymbol::Symbol, [digits::Int]) -> Float64\nstandard_weight(atom, [digits::Int]) -> Float64\nstandard_weight(mol::MolGraph, [digits::Int]) -> Float64\n\nReturn standard atomic weight (or molecular weight).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/mass/#MolecularGraph.standard_weight_unc","page":"Molecular mass/weight","title":"MolecularGraph.standard_weight_unc","text":"standard_weight_unc(atomsymbol::Symbol) -> Tuple{Float64,Float64}\nstandard_weight_unc(atom) -> Tuple{Float64,Float64}\nstandard_weight_unc(mol::MolGraph) -> Tuple{Float64,Float64}\n\nReturn a tuple of standard atomic weight (or molecular weight) and its uncertainty.\n\nIf Atom.mass is specified, calculated exact mass of the atom will be used instead. \n\n\n\n\n\n","category":"function"},{"location":"#MolecularGraph.jl","page":"Home","title":"MolecularGraph.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MolecularGraph.jl is a graph-based molecule modeling and chemoinformatics analysis toolkit fully implemented in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"README.md on GitHub","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(@v1.8) pkg> add MolecularGraph","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See Pluto.jl notebook tutorials","category":"page"},{"location":"","page":"Home","title":"Home","text":"Getting started\nMolecular graph basics\nScope of MolecularGraph.jl\nConsiderations in molecular graph implementation\nBasic operations provided by Graphs.jl interface\nMolGraph type and atom/bond properties\nProperties and descriptors\nBuilt-in molecule properties and descriptors\nLipinski's Rule of five (RO5)\nMolecular formula\nAtom and bond properties\nGraph topology (ring and fused ring)\nAuto-update mechanism of properties\nPreprocessing\nRemove hydrogen vertices\nExtract molecules of interest\nStandardize charges\nDealing with resonance structure\nCustomize property updater\nMass and isotopes\nMolecular weight and exact mass\nUncertainty\nIsotopic composition\nSimulate mass spectrum\nSubstructure and query\nSubstructure match\nInChI and InChIKey\nSMARTS query\nStructural alerts (e.g. PAINS)\nFunctional group analysis\nQuery containment\nMaximum common substructure (MCS)\nMaximum common induced substructure (MCIS)\nMaximum common edge-induced substructure (MCES)\nConnected or disconnected MCS\nWorking with larger molecules\nTopological constraint (tdMCS)\nDrawing molecule\nSettings of 2D structure images\nChange image size\nLayout for web and Pluto notebook\nRegenerate 2D coordinates\n3D molecule rendering using Makie.jl","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MIT license   See Assets/README.md for details of external data sets and their licenses.","category":"page"},{"location":"#Copyright","page":"Home","title":"Copyright","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(C) 2018-2023 Seiji Matsuoka and contributors","category":"page"},{"location":"moleculargraph/model/#Molecular-graph-models","page":"Molecular graph models","title":"Molecular graph models","text":"","category":"section"},{"location":"moleculargraph/model/#Basic-molecular-graph-type-and-interfaces","page":"Molecular graph models","title":"Basic molecular graph type and interfaces","text":"","category":"section"},{"location":"moleculargraph/model/","page":"Molecular graph models","title":"Molecular graph models","text":"Modules = [MolecularGraph]\nPages   = [\"./model/interface.jl\", \"./model/molgraph.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/model/#MolecularGraph.to_dict-Tuple{AbstractMolGraph}","page":"Molecular graph models","title":"MolecularGraph.to_dict","text":"to_dict(mol::MolGraph) -> Dict{String,Any}\n\nConvert molecule object into JSON compatible dictionary.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/model/#MolecularGraph.to_json-Tuple{AbstractMolGraph}","page":"Molecular graph models","title":"MolecularGraph.to_json","text":"to_json(mol::MolGraph) -> String\n\nConvert molecule object into JSON String.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/model/#MolecularGraph.u_edge-Union{Tuple{T}, Tuple{Type{T}, Any, Any}} where T<:Integer","page":"Molecular graph models","title":"MolecularGraph.u_edge","text":"u_edge(::Type{T}, src, dst) where T <: Integer -> Edge{T}\nu_edge(g::SimpleGraph{T}, src, dst) where T -> Edge{T}\nu_edge(mol::AbstractMolGraph{T}, src, dst) where T -> Edge{T}\n\nA workaround for UndirectedEdge that are not yet implemented in SimpleGraph\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/model/#MolecularGraph.Reaction","page":"Molecular graph models","title":"MolecularGraph.Reaction","text":"Reaction{T}\n\nReaction type.\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/model/#MolecularGraph.MolGraph","page":"Molecular graph models","title":"MolecularGraph.MolGraph","text":"MolGraph{T,V,E} <: SimpleMolGraph{T,V,E}\n\nBasic molecular graph type.\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/model/#Default-atom-and-bond-types","page":"Molecular graph models","title":"Default atom and bond types","text":"","category":"section"},{"location":"moleculargraph/model/","page":"Molecular graph models","title":"Molecular graph models","text":"Modules = [MolecularGraph]\nPages   = [\"./model/atom.jl\", \"./model/bond.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/model/#MolecularGraph.atomnumber-Tuple{Symbol}","page":"Molecular graph models","title":"MolecularGraph.atomnumber","text":"atomnumber(atomsymbol::Symbol) -> Int\n\nReturn atom number.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/model/#MolecularGraph.atomsymbol-Tuple{Int64}","page":"Molecular graph models","title":"MolecularGraph.atomsymbol","text":"atomsymbol(n::Int) -> Symbol\n\nReturn atom symbol of given atomic number.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/model/#MolecularGraph.SDFAtom","page":"Molecular graph models","title":"MolecularGraph.SDFAtom","text":"SDFAtom\n\nSDFile (CTAB) atom property type.\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/model/#MolecularGraph.SMILESAtom","page":"Molecular graph models","title":"MolecularGraph.SMILESAtom","text":"SMILESAtom\n\nSMILES atom property type.\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/model/#MolecularGraph.SDFBond","page":"Molecular graph models","title":"MolecularGraph.SDFBond","text":"SDFBond\n\nSDFile (CTAB) bond property type.\n\nSDFile bond notation\nSingle bond\n0: u - v\n1: u ◀ v (Up-arrow)\n4: u ~ v (Up or down)\n6: u ◁ v (Down-arrow)\nDouble bond\n0: v = u\n3: u x v (Cis-Trans Unknown)\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/model/#MolecularGraph.SMILESBond","page":"Molecular graph models","title":"MolecularGraph.SMILESBond","text":"SMILESBond\n\nSMILES bond property type.\n\n\n\n\n\n","category":"type"},{"location":"notes/misc/#Miscellaneous","page":"Miscellaneous","title":"Miscellaneous","text":"","category":"section"},{"location":"notes/misc/#Name-of-this-library","page":"Miscellaneous","title":"Name of this library","text":"","category":"section"},{"location":"notes/misc/","page":"Miscellaneous","title":"Miscellaneous","text":"The name of this library is MolecularGraph.jl, as the maintainer did not know of the convention of pluralizing library names in the Graphs.jl ecosystem at the time when this was created. The maintainer is not opposed to changing the name to MolecularGraphs.jl if the community agrees.","category":"page"}]
}
